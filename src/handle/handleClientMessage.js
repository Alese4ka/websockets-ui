import { db } from "../database/database.js";
import { v4 as uuidv4 } from 'uuid';

const uuid = uuidv4();
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename); 
const dirPath = path.join(__dirname, '../database/database.json'); 
const writableStream = fs.createWriteStream(dirPath);

export const returnObjectToClient = (data) => {
  const message = JSON.parse(data);
  console.log('message', message)

  if (message.type === 'reg') {
    console.log(`Client has sent us: ${data}`)
    const { type, ...userData} = message;
    db.push({id: userData.id, ...JSON.parse(userData.data) });
    const userName = JSON.parse(userData.data);
    const t = {
      name: userName.name,
      index: uuid,
      error: false,
      errorText: '',
  };
    const jsonString = {
      type: "reg",
      data: JSON.stringify(t),
      id: 0,
  };

  writableStream.write(JSON.stringify(db, null, 2));
  return JSON.stringify(jsonString);
    ///  сделать стрим врайтебл и туда запистаь данные
  }

  if (message.type === 'create_room' || message.type === 'single_play') {
    console.log(`Client has sent us: ${data}`)
    const addUserObj = {
      type: "create_game", //send for both players in the room, after they are connected to the room
      data: JSON.stringify({
              idGame: 0,  
              idPlayer: db[0].id, /* generated by server id for player in the game session, not enemy (unique id for every player) */
          }),
      id: 0,
  };
    return JSON.stringify(addUserObj);
  }

  if(message.type === 'add_ships') {
    const addShipsObj = JSON.stringify({
      type: "start_game",
      data: JSON.stringify({
              ships: JSON.parse(message.data),
              currentPlayerIndex: message.id,
          }),
      id: 0
    });
    return addShipsObj;
  }

  if(message.type === 'attack') {
    const infoObj = JSON.parse(message.data);
    const attackShipsObj = JSON.stringify({
      type: "attack",
      data: JSON.stringify({
            position: {x: infoObj.x, y: infoObj.y },
            currentPlayerIndex: message.id,
            status: 'killed'
          }),
      id: 0
    });
    return attackShipsObj;
  }
}